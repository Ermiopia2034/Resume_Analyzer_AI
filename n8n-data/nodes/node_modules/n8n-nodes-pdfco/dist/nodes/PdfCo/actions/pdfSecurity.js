"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const GenericFunctions_1 = require("../GenericFunctions");
exports.description = [
    {
        displayName: 'Url',
        name: 'url',
        type: 'string',
        required: true,
        default: '',
        placeholder: 'https://example.com/invoice.pdf',
        description: 'The URL of the PDF file to add security to or remove security from',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.PDFSecurity],
            },
        },
    },
    {
        displayName: 'Operation Mode',
        name: 'mode',
        type: 'options',
        options: [
            {
                name: 'Add Security',
                value: 'add_security',
            },
            {
                name: 'Remove Security',
                value: 'remove_security',
            },
        ],
        default: 'add_security',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.PDFSecurity],
            },
        },
    },
    {
        displayName: 'Owner Password',
        name: 'ownerPassword',
        type: 'string',
        typeOptions: {
            password: true,
        },
        description: 'The password for the owner',
        default: '',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.PDFSecurity],
                mode: ['add_security'],
            },
        },
    },
    {
        displayName: 'User Password',
        name: 'userPassword',
        type: 'string',
        typeOptions: {
            password: true,
        },
        description: 'The password for the user',
        default: '',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.PDFSecurity],
                mode: ['add_security'],
            },
        },
    },
    {
        displayName: 'Owner/User Password',
        name: 'passwordForRemoveSecurity',
        type: 'string',
        required: true,
        typeOptions: {
            password: true,
        },
        description: 'The password for the owner/user',
        default: '',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.PDFSecurity],
                mode: ['remove_security'],
            },
        },
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptionsAddSecurity',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.PDFSecurity],
                mode: ['add_security'],
            },
        },
        options: [
            {
                displayName: 'Encryption Algorithm',
                name: 'encryptionAlgorithm',
                type: 'options',
                options: [
                    {
                        name: 'AES 128bit',
                        value: 'AES_128bit',
                    },
                    {
                        name: 'AES 256bit',
                        value: 'AES_256bit',
                    },
                    {
                        name: 'RC4 40bit',
                        value: 'RC4_40bit',
                    },
                    {
                        name: 'RC4 128bit',
                        value: 'RC4_128bit',
                    },
                ],
                default: 'AES_128bit',
            },
            {
                displayName: 'Allow Accessibility Support',
                name: 'allowAccessibilitySupport',
                description: 'Whether to allow accessibility support',
                type: 'boolean',
                default: true,
            },
            {
                displayName: 'Allow Document Assembly',
                name: 'allowAssemblyDocument',
                description: 'Whether to allow document assembly',
                type: 'boolean',
                default: true,
            },
            {
                displayName: 'Allow Printing',
                name: 'allowPrintDocument',
                description: 'Whether to allow printing',
                type: 'boolean',
                default: true,
            },
            {
                displayName: 'Allow Form Filling',
                name: 'allowFillForms',
                description: 'Whether to allow form filling',
                type: 'boolean',
                default: true,
            },
            {
                displayName: 'Allow Document Modification',
                name: 'allowModifyDocument',
                description: 'Whether to allow document modification',
                type: 'boolean',
                default: true,
            },
            {
                displayName: 'Allow Content Extraction',
                name: 'allowContentExtraction',
                description: 'Whether to allow content extraction',
                type: 'boolean',
                default: true,
            },
            {
                displayName: 'Allow Annotation Modification',
                name: 'allowModifyAnnotations',
                description: 'Whether to allow annotation modification',
                type: 'boolean',
                default: true,
            },
            {
                displayName: 'Print Quality',
                name: 'printQuality',
                type: 'options',
                options: [
                    {
                        name: 'High Resolution',
                        value: 'HighResolution',
                    },
                    {
                        name: 'Low Resolution',
                        value: 'LowResolution',
                    },
                ],
                default: 'HighResolution',
            },
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
                description: 'The name of the output file',
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
                description: 'The callback URL or Webhook used to receive the output data',
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
                description: 'The expiration time of the output link',
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
                description: 'Use "JSON" to adjust custom properties. Review Profiles at https://developer.pdf.co/api/profiles/index.html to set extra options for API calls and may be specific to certain APIs.',
            },
        ],
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptionsRemoveSecurity',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.PDFSecurity],
                mode: ['remove_security'],
            },
        },
        options: [
            {
                displayName: 'File Name',
                name: 'name',
                type: 'string',
                default: '',
            },
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                placeholder: 'https://example.com/callback',
            },
            {
                displayName: 'Output Links Expiration (In Minutes)',
                name: 'expiration',
                type: 'number',
                default: 60,
            },
            {
                displayName: 'Custom Profiles',
                name: 'profiles',
                type: 'string',
                default: '',
                placeholder: `{ 'outputDataFormat': 'base64' }`,
            },
        ],
    },
];
async function execute(index) {
    const inputUrl = this.getNodeParameter('url', index);
    const mode = this.getNodeParameter('mode', index);
    const body = {
        url: inputUrl,
        async: true,
        inline: true,
    };
    if (mode === 'add_security') {
        const ownerPassword = this.getNodeParameter('ownerPassword', index);
        body.ownerPassword = ownerPassword;
        const userPassword = this.getNodeParameter('userPassword', index);
        body.userPassword = userPassword;
        const advancedOptions = this.getNodeParameter('advancedOptionsAddSecurity', index);
        const encryptionAlgorithm = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.encryptionAlgorithm;
        if (encryptionAlgorithm)
            body.encryptionAlgorithm = encryptionAlgorithm;
        const allowAccessibilitySupport = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.allowAccessibilitySupport;
        if (allowAccessibilitySupport !== undefined)
            body.allowAccessibilitySupport = allowAccessibilitySupport;
        const allowAssemblyDocument = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.allowAssemblyDocument;
        if (allowAssemblyDocument !== undefined)
            body.allowAssemblyDocument = allowAssemblyDocument;
        const allowPrintDocument = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.allowPrintDocument;
        if (allowPrintDocument !== undefined)
            body.allowPrintDocument = allowPrintDocument;
        const allowFillForms = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.allowFillForms;
        if (allowFillForms !== undefined)
            body.allowFillForms = allowFillForms;
        const allowModifyDocument = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.allowModifyDocument;
        if (allowModifyDocument !== undefined)
            body.allowModifyDocument = allowModifyDocument;
        const allowContentExtraction = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.allowContentExtraction;
        if (allowContentExtraction !== undefined)
            body.allowContentExtraction = allowContentExtraction;
        const allowModifyAnnotations = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.allowModifyAnnotations;
        if (allowModifyAnnotations !== undefined)
            body.allowModifyAnnotations = allowModifyAnnotations;
        const printQuality = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.printQuality;
        if (printQuality !== undefined)
            body.printQuality = printQuality;
        const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
        if (fileName)
            body.name = fileName;
        const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
        if (callback)
            body.callback = callback;
        const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
        if (expiration)
            body.expiration = expiration;
        const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
        if (profiles)
            body.profiles = profiles;
    }
    else {
        const passwordForRemoveSecurity = this.getNodeParameter('passwordForRemoveSecurity', index);
        body.password = passwordForRemoveSecurity;
        const advancedOptions = this.getNodeParameter('advancedOptionsRemoveSecurity', index);
        const fileName = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.name;
        if (fileName)
            body.name = fileName;
        const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
        if (callback)
            body.callback = callback;
        const expiration = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.expiration;
        if (expiration)
            body.expiration = expiration;
        const profiles = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.profiles;
        if (profiles)
            body.profiles = profiles;
    }
    (0, GenericFunctions_1.sanitizeProfiles)(body);
    const endpoint = mode === 'add_security' ? '/v1/pdf/security/add' : '/v1/pdf/security/remove';
    const responseData = await GenericFunctions_1.pdfcoApiRequestWithJobCheck.call(this, endpoint, body);
    return this.helpers.returnJsonArray(responseData);
}
//# sourceMappingURL=pdfSecurity.js.map