"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = void 0;
exports.execute = execute;
const GenericFunctions_1 = require("../GenericFunctions");
exports.description = [
    {
        displayName: 'Url',
        name: 'url',
        type: 'string',
        required: true,
        default: '',
        placeholder: 'https://example.com/invoice.pdf',
        description: 'The URL of the invoice to parse',
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.AiInvoiceParser],
            },
        }
    },
    {
        displayName: 'Advanced Options',
        name: 'advancedOptions',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        displayOptions: {
            show: {
                operation: [GenericFunctions_1.ActionConstants.AiInvoiceParser],
            },
        },
        options: [
            {
                displayName: 'Webhook URL',
                name: 'callback',
                type: 'string',
                default: '',
                description: 'The callback URL or Webhook used to receive the output data',
                placeholder: 'https://example.com/callback',
            },
        ],
    }
];
async function execute(index) {
    const inputUrl = this.getNodeParameter('url', index);
    const advancedOptions = this.getNodeParameter('advancedOptions', index);
    const callback = advancedOptions === null || advancedOptions === void 0 ? void 0 : advancedOptions.callback;
    const endpoint = `/v1/ai-invoice-parser`;
    const body = { url: inputUrl, async: true };
    if (callback)
        body.callback = callback;
    const responseData = await GenericFunctions_1.pdfcoApiRequestWithJobCheck.call(this, endpoint, body);
    return this.helpers.returnJsonArray(responseData);
}
//# sourceMappingURL=aiInvoiceParser.js.map